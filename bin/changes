#!/scratch/install/bin/ruby

# Iterate thorugh each file in the current repository.
# Then, for each file, do a git log, get the commits, and fetch the changes as
# far back as possible.
#
def x(v)
  #puts v
  %x[#{v}]
end

File.readlines('meta/repos.lst').sort_by{|x| x.downcase }.each do |pkg|
  mylog = {}
  pkg.strip!
  pkgpath = "projects/#{pkg}"
  puts pkgpath
  Dir.chdir(pkgpath) do
    files = Dir.glob('**/*.hs')
    files.each do |file|
      commits = x(%[git log --pretty=format:'%h' #{file}]).split().map(&:strip)
      mylog[file.strip] = []
      commits.each do |c|
        mylog[file.strip] << {:sha => c, :patch => x(%[git show -p #{c} #{file}]), :file => x(%[git show #{c}:#{file}])}
      end
    end
  end
  %x[mkdir -p changes/#{pkg}]
  mylog.each do |k,v|
    #puts "changes/#{pkg}/#{k}"
    %x[mkdir -p "changes/#{pkg}/#{k}"]
    i = 0
    v.each do |a|
      i += 1
      y = "changes/#{pkg}/#{k}"
      x = "#{y}/#{i}"
      File.open("#{x}.sha", 'w') do |f|
        f.write a[:sha]
      end
      File.open("#{x}.patch", 'w') do |f|
        f.write a[:patch]
      end
      File.open("#{x}.file", 'w') do |f|
        f.write a[:file]
      end
      puts "#{x}.hs"
      %x[./bin/pretty #{x}.file > #{x}.hs || cat #{x}.file > #{x}.hs]
      if i > 1
        File.open("#{y}/#{i-1}.diff", 'w') do |f|
          f.write x(%[diff -B -d --ignore-all-space -b #{y}/#{i}.hs #{y}/#{i-1}.hs])
        end
      end
    end
  end
end
